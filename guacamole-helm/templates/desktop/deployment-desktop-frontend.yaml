apiVersion: apps/v1
kind: Deployment
metadata:
  name: desktop-frontend-{{ .Release.Name }}
  labels:
    {{- include "guacamole.labels" . | nindent 4 }}
    component: desktop-frontend
spec:
  replicas: {{ .Values.desktopFrontend.replicaCount }}
  selector:
    matchLabels:
      {{- include "desktop-frontend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "desktop-frontend.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.common.podSecurityContext | nindent 8 }}
      initContainers:
      - name: wait-for-api
        image: curlimages/curl:8.00.1
        command: ['sh', '-c', 'until curl -s http://desktop-api-{{ .Release.Name }}/api/health > /dev/null 2>&1; do echo waiting for api; sleep 2; done;']
        securityContext:
          {{- toYaml .Values.common.containerSecurityContext | nindent 10 }}
          runAsUser: 1000
      containers:
      - name: desktop-frontend
        image: {{ .Values.desktopFrontend.image }}
        imagePullPolicy: IfNotPresent
        securityContext:
          {{- toYaml .Values.common.containerSecurityContext | nindent 10 }}
          runAsUser: 1000
          runAsGroup: 1000
        env:
          - name: SECRET_KEY
            value: {{ .Values.common.credentials.secretKey | quote }}
          - name: API_URL
            value: "http://desktop-api-{{ .Release.Name }}"
          - name: GUACAMOLE_URL
            value: {{ printf "https://%s" (include "guacamole.hostname" .) | quote }}
          - name: FLASK_APP
            value: "app.py"
          - name: FLASK_ENV
            value: "production"
          - name: PYTHONUNBUFFERED
            value: "1"
        ports:
        - containerPort: {{ .Values.desktopFrontend.containerPort }}
          name: http
        {{- if .Values.desktopFrontend.healthcheck.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.desktopFrontend.healthcheck.path }}
            port: http
          initialDelaySeconds: {{ .Values.desktopFrontend.healthcheck.initialDelaySeconds }}
          periodSeconds: {{ .Values.desktopFrontend.healthcheck.periodSeconds }}
          timeoutSeconds: {{ .Values.desktopFrontend.healthcheck.timeoutSeconds }}
          failureThreshold: {{ .Values.desktopFrontend.healthcheck.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.desktopFrontend.healthcheck.path }}
            port: http
          initialDelaySeconds: {{ .Values.desktopFrontend.healthcheck.initialDelaySeconds }}
          periodSeconds: {{ .Values.desktopFrontend.healthcheck.periodSeconds }}
          timeoutSeconds: {{ .Values.desktopFrontend.healthcheck.timeoutSeconds }}
          failureThreshold: {{ .Values.desktopFrontend.healthcheck.failureThreshold }}
        {{- end }}
