// Flexbox mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Media query mixins
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: $breakpoint-xs) { @content; }
  }
  @else if $breakpoint == sm {
    @media (max-width: $breakpoint-sm) { @content; }
  }
  @else if $breakpoint == md {
    @media (max-width: $breakpoint-md) { @content; }
  }
  @else if $breakpoint == lg {
    @media (max-width: $breakpoint-lg) { @content; }
  }
}

// Responsive property mixin
@mixin responsive-prop($property, $default-value, $sm-value: null, $md-value: null, $lg-value: null) {
  #{$property}: $default-value;

  @if $sm-value {
    @include respond-to(sm) {
      #{$property}: $sm-value;
    }
  }

  @if $md-value {
    @include respond-to(md) {
      #{$property}: $md-value;
    }
  }

  @if $lg-value {
    @include respond-to(lg) {
      #{$property}: $lg-value;
    }
  }
}

// Button mixin
@mixin button-variant($bg-color, $text-color: white, $hover-color: darken($bg-color, 10%)) {
  background-color: $bg-color;
  color: $text-color;
  border: $border-width solid transparent;
  border-radius: $border-radius;
  padding: $spacing-sm $spacing-md;
  font-weight: $font-weight-medium;
  font-size: $font-size-base;
  transition: background-color $transition-fast, transform $transition-fast, box-shadow $transition-fast;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  cursor: pointer;
  line-height: $line-height-sm;

  &:hover {
    background-color: $hover-color;
    box-shadow: $shadow-sm;
  }

  &:active {
    transform: translateY(1px);
    box-shadow: none;
  }

  &:focus {
    @include focus-outline($bg-color);
  }

  &:disabled {
    opacity: 0.65;
    cursor: not-allowed;
    pointer-events: none;
  }
}

// Shadow mixins
@mixin box-shadow($level: 1) {
  @if $level == 1 {
    box-shadow: $shadow-sm;
  } @else if $level == 2 {
    box-shadow: $shadow-md;
  } @else if $level == 3 {
    box-shadow: $shadow-lg;
  }
}

// Card mixin
@mixin card($padding: $spacing-md, $bg-color: $bg-white, $shadow: 1) {
  background-color: $bg-color;
  padding: $padding;
  border-radius: $border-radius-lg;
  @include box-shadow($shadow);
}

// Truncate text with ellipsis
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Focus state styles
@mixin focus-outline($color: $primary-color) {
  outline: none;
  box-shadow: 0 0 0 3px rgba($color, 0.3);
}

// Animation mixin
@mixin animate($animation, $duration: 1s, $timing: ease, $delay: 0s) {
  animation: $animation $duration $timing $delay;
}

// Badge mixin
@mixin badge($bg-color: $primary-color, $color: white) {
  display: inline-block;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: $font-size-xs;
  background-color: $bg-color;
  color: $color;
  font-weight: $font-weight-medium;
}

// Typography mixins
@mixin heading($size: lg, $weight: bold, $color: $text-dark) {
  @if $size == xs {
    font-size: $font-size-sm;
  } @else if $size == sm {
    font-size: $font-size-base;
  } @else if $size == md {
    font-size: $font-size-lg;
  } @else if $size == lg {
    font-size: $font-size-xl;
  } @else if $size == xl {
    font-size: $font-size-xxl;
  }

  font-weight: $weight;
  color: $color;
  line-height: $line-height-sm;
  margin-bottom: $spacing-md;
}

// Form control mixin
@mixin form-control {
  width: 100%;
  padding: $spacing-sm;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $text-color;
  background-color: $bg-white;
  border: $border-width solid $border-color;
  border-radius: $border-radius;
  transition: border-color $transition-fast, box-shadow $transition-fast;

  &:focus {
    border-color: $primary-color;
    @include focus-outline($primary-color);
  }

  &::placeholder {
    color: $text-light;
    opacity: 1;
  }

  &:disabled {
    background-color: $bg-light;
    opacity: 0.7;
    cursor: not-allowed;
  }
}

// Container mixin
@mixin container($max-width: $container-max-width) {
  width: 100%;
  min-width: $max-width;
  max-width: $max-width;
  margin-right: auto;
  margin-left: auto;
  padding-right: $container-padding;
  padding-left: $container-padding;
}

// Status indicator mixin
@mixin status-indicator($color: $success-color, $size: 10px) {
  display: inline-block;
  width: $size;
  height: $size;
  border-radius: $border-radius-circle;
  background-color: $color;
}

// Grid mixin
@mixin grid($columns: 1, $gap: $spacing-md) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  grid-gap: $gap;
}
