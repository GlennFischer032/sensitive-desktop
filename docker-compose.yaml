services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"  # Using standard PostgreSQL port
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - desktop-network

  guacd:
    image: guacamole/guacd
    networks:
      - desktop-network

  guacamole:
    image: guacamole/guacamole
    environment:
      GUACD_HOSTNAME: guacd
      # JSON Authentication configuration via environment variables
      GUACAMOLE_EXTENSION_PRIORITY: json
      GUACAMOLE_JSON_SECRET_KEY: ${GUACAMOLE_JSON_SECRET_KEY}
      # Direct property mapping for Docker container
      JSON_SECRET_KEY: ${GUACAMOLE_JSON_SECRET_KEY}
      EXTENSION_PRIORITY: json
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"  # Using standard Guacamole port
    networks:
      - desktop-network

  desktop-api:
    build:
      context: ./desktop-manager-api
      dockerfile: Dockerfile
      args:
        - FLASK_DEBUG=1
    ports:
      - "5000:5000"
      - "5679:5679"  # Debug port
    volumes:
      - ./desktop-manager-api/src:/app/src
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GUACAMOLE_URL=${GUACAMOLE_URL}
      - GUACAMOLE_JSON_SECRET_KEY=${GUACAMOLE_JSON_SECRET_KEY}
      - EXTERNAL_GUACAMOLE_URL=${EXTERNAL_GUACAMOLE_URL}
      # OIDC admin identification
      - ADMIN_OIDC_SUB=${ADMIN_OIDC_SUB}
      - RANCHER_API_TOKEN=${RANCHER_API_TOKEN}
      - RANCHER_API_URL=${RANCHER_API_URL}
      - RANCHER_CLUSTER_ID=${RANCHER_CLUSTER_ID}
      - RANCHER_REPO_NAME=${RANCHER_REPO_NAME}
      - NAMESPACE=${NAMESPACE}
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
      # Social Auth Configuration
      - SOCIAL_AUTH_OIDC_PROVIDER_URL=${SOCIAL_AUTH_OIDC_PROVIDER_URL}
      - SOCIAL_AUTH_OIDC_CLIENT_ID=${SOCIAL_AUTH_OIDC_CLIENT_ID}
      - SOCIAL_AUTH_OIDC_CLIENT_SECRET=${SOCIAL_AUTH_OIDC_CLIENT_SECRET}
      - SOCIAL_AUTH_LOGIN_REDIRECT_URL=${SOCIAL_AUTH_LOGIN_REDIRECT_URL}
      - SOCIAL_AUTH_LOGIN_ERROR_URL=${SOCIAL_AUTH_LOGIN_ERROR_URL}
      - SOCIAL_AUTH_OIDC_CALLBACK_URL=${SOCIAL_AUTH_OIDC_CALLBACK_URL}
      - CORS_ALLOWED_ORIGINS=http://localhost:5001,http://desktop-frontend:5000
    depends_on:
      postgres:
        condition: service_healthy
      guacamole:
        condition: service_started
    networks:
      - desktop-network
    restart: on-failure:3
    healthcheck:
      test: /healthcheck.sh
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    extra_hosts:
      - "host.docker.internal:host-gateway"

  desktop-frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        - FLASK_DEBUG=1
    ports:
      - "5001:5000"
      - "5678:5678"  # Debug port
    volumes:
      - ./app:/app
      - /app/desktop_frontend.egg-info/
      - /app/**/__pycache__
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - API_URL=http://desktop-api:5000
      - GUACAMOLE_URL=${GUACAMOLE_URL}
      - EXTERNAL_GUACAMOLE_URL=http://localhost:8080/guacamole
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379/0
      # OIDC Configuration
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET}
      - OIDC_PROVIDER_URL=https://login.e-infra.cz/oidc
      - OIDC_REDIRECT_URI=http://localhost:5001/auth/oidc/callback
      # Debug settings
      - DEBUG_LOGIN_ENABLED=${DEBUG_LOGIN_ENABLED}
      - PYTHONDONTWRITEBYTECODE=1  # Don't write .pyc files
    depends_on:
      desktop-api:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - desktop-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - desktop-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

networks:
  desktop-network:
    driver: bridge
