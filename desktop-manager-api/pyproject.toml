[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[project]
name = "desktop_manager"
version = "0.1.0"
description = "Desktop Manager API"
requires-python = ">=3.11"
dependencies = [
    "flask",
    "flask-cors",
    "sqlalchemy",
    "requests",
    "pydantic",
    "psycopg2-binary",
    "pydantic-settings",
    "python-jose[cryptography]",
    "passlib[bcrypt]",
    "PyJWT",
    # Guacamole JSON Auth dependency
    "pycryptodome",
    "pydantic[email]",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-env>=1.0.1",
    "fakeredis",
    "responses>=0.23.0",
    "freezegun>=1.2.0",
    "SQLAlchemy-Utils>=0.41.0"
]

dev = [
    "debugpy",
    "gunicorn",
    "python-multipart",
    "werkzeug",
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["desktop_manager*"]

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=desktop_manager --cov-report=term-missing"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["src/desktop_manager"]
omit = [
    "tests/*",
    "**/tests/*",
    "**/__init__.py",
    ".venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 120
# Enable auto-fixing
fix = true
# Enable unsafe fixes for more automation
unsafe-fixes = true

[tool.ruff.lint]
# Linting rules configuration
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "C90", # mccabe
    "I",   # isort
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "PT",  # flake8-pytest-style
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PL",  # pylint
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "G",   # flake8-logging-format
    "RUF", # Ruff-specific rules
    "D",   # pydocstyle
]

ignore = [
    "PLR2004",  # Magic value used in comparison
    "PLW0603",  # Using the global statement to update variables is discouraged
    "PLR0913",  # Too many arguments to function call
    "F403",     # 'from module import *' used; unable to detect undefined names
    "F405",     # name may be undefined, or defined from star imports: module
    "D107",     # Missing docstring in __init__
    "D203",     # One blank line required before class docstring
    "D213",     # Multi-line docstring summary should start at the second line
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D106",     # Missing docstring in public nested class
    "D205",     # 1 blank line required between summary line and description
    "A003",     # Class attribute shadowing a Python builtin
    "N806",     # Variable in function should be lowercase
    "RUF012",   # Mutable class attributes should be annotated with typing.ClassVar
    "C901",     # Function is too complex
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
]
# Allow Ruff to automatically fix issues including unused imports
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use assert and more complex function calls
"tests/**/*" = [
    "S101", "ARG002", "B011", "PLR2004", "G", "D",
    "S105", "S106", "S108", "PT011", "ARG001",
    "E501", "C901", "PLR0911", "PLR0915", "SIM117"
]
"**/test_*.py" = [
    "S101", "ARG002", "B011", "PLR2004", "G", "D",
    "S105", "S106", "S108", "PT011", "ARG001",
    "E501", "C901", "PLR0911", "PLR0915", "SIM117"
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-third-party = ["flask", "sqlalchemy", "pydantic", "requests", "werkzeug", "pytest"]
case-sensitive = true
combine-as-imports = true
force-single-line = false
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.mccabe]
# Flag overly complex functions with complexity > 10
max-complexity = 10

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like `dict()` or `list()`
extend-immutable-calls = ["marshmallow.fields.Field"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

# Flake8 config for compatibility
[tool.flake8]
max-line-length = 120
exclude = ".git,__pycache__,build,dist"

# Deptry configuration
[tool.deptry]
exclude = ["venv", ".venv", ".direnv", "tests", ".git", "setup.py"]
extend_exclude = []
known_first_party = ["src"]
ignore = ["DEP003"]

[tool.deptry.per_rule_ignores]
DEP002 = [
    "gunicorn",
    "psycopg2-binary",
    "python-multipart",
    "kubernetes",
    "werkzeug",
    "sqlmodel",
    "Flask-SQLAlchemy",
    "bleach",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-asyncio",
    "pytest-env",
    "fakeredis",
    "responses",
    "freezegun",
    "SQLAlchemy-Utils",
    "debugpy"
]

[tool.deptry.package_module_name_map]
"pytest-asyncio" = "pytest_asyncio"
"pytest-env" = "pytest_env"
"debugpy" = "debugpy"
